{"ast":null,"code":"var _jsxFileName = \"/Users/jackierauhut/Documents/recipe_share/src/components/AddRecipeModal/AddRecipeModal.js\";\nimport React, { Fragment } from \"react\";\nimport { ModalHeader, ModalBody, ModalFooter, Form, Label, Input, FormGroup, InputGroup, Button, InputGroupAddon, FormFeedback, Alert } from \"reactstrap\";\nimport \"./AddRecipeModal.css\";\n\nclass AddRecipeModal extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.onSumbitRecipe = () => {\n      const recipeIngredients = this.state.recipeIngredients.filter(ingredient => ingredient.trim() !== \"\");\n      const recipeSteps = this.state.recipeSteps.filter(step => step.trim() !== \"\"); // Verify that ingredient and direction list are not empty\n\n      if (recipeIngredients.length === 0) {\n        this.setState({\n          errorMsg: \"Please enter at least one ingredient\"\n        });\n        this.setState({\n          invalidRecipe: true\n        });\n      } else if (recipeSteps.length === 0) {\n        this.setState({\n          errorMsg: \"Please enter at least one direction\"\n        });\n        this.setState({\n          invalidRecipe: true\n        });\n      } else {\n        this.setState({\n          invalidRecipe: false\n        });\n        const token = window.sessionStorage.getItem(\"token\"); // verify valid form input\n\n        if (this.state.recipeName === \"\") {\n          this.setState({\n            isNameInvalid: true\n          });\n        }\n\n        if (this.state.recipeDescription === \"\") {\n          this.setState({\n            isDescriptionInvalid: true\n          });\n        }\n\n        if (!/\\.(jpeg|jpg|gif|png)$/.test(this.state.recipePicture)) {\n          this.setState({\n            isPictureInvalid: true\n          });\n        }\n\n        fetch(\"http://localhost:3000/recipe\", {\n          method: \"post\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n            Authorization: token\n          },\n          body: JSON.stringify({\n            name: this.state.recipeName,\n            cookTime: this.state.recipeCookTimeHour === \"00\" ? `${this.state.recipeCookTimeMinute} mins` : `${parseInt(this.state.recipeCookTimeHour, 10)} hr ${this.state.recipeCookTimeMinute} mins`,\n            ingredients: recipeIngredients,\n            steps: recipeSteps,\n            description: this.state.recipeDescription,\n            picture: this.state.recipePicture\n          })\n        }).then(response => response.json()).then(data => {\n          if (data.id) {\n            this.props.toggle();\n            this.props.navToRecipe(data.id);\n          } else {\n            throw new Error(\"Something went wrong when trying to add recipe\");\n          }\n        }).catch(console.log);\n      }\n    };\n\n    this.onNameChange = event => {\n      this.setState({\n        recipeName: event.target.value\n      });\n      let isNameInvalid = false;\n\n      if (event.target.value.length === 0) {\n        isNameInvalid = true;\n      }\n\n      this.setState({\n        isNameInvalid\n      });\n    };\n\n    this.onCookTimeHourChange = event => {\n      this.setState({\n        recipeCookTimeHour: event.target.value\n      });\n    };\n\n    this.onCookTimeMinuteChange = event => {\n      this.setState({\n        recipeCookTimeMinute: event.target.value\n      });\n    };\n\n    this.onDescriptionChange = event => {\n      this.setState({\n        recipeDescription: event.target.value\n      });\n      let isDescriptionInvalid = false;\n\n      if (event.target.value.length === 0) {\n        isDescriptionInvalid = true;\n      }\n\n      this.setState({\n        isDescriptionInvalid\n      });\n    };\n\n    this.onPictureChange = event => {\n      this.setState({\n        recipePicture: event.target.value\n      });\n      let isPictureInvalid = false;\n\n      if (!/\\.(jpeg|jpg|gif|png)$/.test(event.target.value)) {\n        isPictureInvalid = true;\n      }\n\n      this.setState({\n        isPictureInvalid\n      });\n    };\n\n    this.state = {\n      isCreateRecipeOpen: false,\n      recipeName: \"\",\n      isNameInvalid: false,\n      recipeCookTimeHour: \"00\",\n      recipeCookTimeMinute: \"00\",\n      recipeIngredients: [\"\"],\n      recipeSteps: [\"\"],\n      recipeDescription: \"\",\n      isDescriptionInvalid: false,\n      recipePicture: \"\",\n      isPictureInvalid: false,\n      errMsg: \"Unable to create recipe\",\n      invalidRecipe: false\n    };\n  }\n\n  createIngredientsList() {\n    return this.state.recipeIngredients.map((ingredient, i) => /*#__PURE__*/React.createElement(\"div\", {\n      key: i,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(InputGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Input, {\n      type: \"text\",\n      value: ingredient || \"\",\n      placeholder: \"Add an ingredient for this recipe\",\n      onChange: this.handleChangeIngredients.bind(this, i),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 11\n      }\n    }), i !== 0 ? /*#__PURE__*/React.createElement(InputGroupAddon, {\n      addonType: \"append\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      color: \"danger\",\n      onClick: this.removeIngredientsClick.bind(this, i),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 15\n      }\n    }, \"Remove\")) : null)));\n  }\n\n  handleChangeIngredients(i, event) {\n    let recipeIngredients = [...this.state.recipeIngredients];\n    recipeIngredients[i] = event.target.value;\n    this.setState({\n      recipeIngredients\n    });\n  }\n\n  addIngredientsClick() {\n    this.setState(prevState => ({\n      recipeIngredients: [...prevState.recipeIngredients, \"\"]\n    }));\n  }\n\n  removeIngredientsClick(i) {\n    let recipeIngredients = [...this.state.recipeIngredients];\n    recipeIngredients.splice(i, 1);\n    this.setState({\n      recipeIngredients\n    });\n  }\n\n  createStepsList() {\n    return this.state.recipeSteps.map((step, i) => /*#__PURE__*/React.createElement(\"div\", {\n      key: i,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(InputGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Input, {\n      type: \"textarea\",\n      value: step || \"\",\n      placeholder: \"Add an instruction for completing this recipe\",\n      onChange: this.handleChangeSteps.bind(this, i),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 11\n      }\n    }), i !== 0 ? /*#__PURE__*/React.createElement(InputGroupAddon, {\n      addonType: \"append\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      color: \"danger\",\n      onClick: this.removeStepsClick.bind(this, i),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 15\n      }\n    }, \"Remove\")) : null)));\n  }\n\n  handleChangeSteps(i, event) {\n    let recipeSteps = [...this.state.recipeSteps];\n    recipeSteps[i] = event.target.value;\n    this.setState({\n      recipeSteps\n    });\n  }\n\n  addStepsClick() {\n    this.setState(prevState => ({\n      recipeSteps: [...prevState.recipeSteps, \"\"]\n    }));\n  }\n\n  removeStepsClick(i) {\n    let recipeSteps = [...this.state.recipeSteps];\n    recipeSteps.splice(i, 1);\n    this.setState({\n      recipeSteps\n    });\n  }\n\n  generateOptions(min, max) {\n    let list = [];\n\n    for (let i = min; i <= max; i++) {\n      list.push((\"0\" + i).slice(-2));\n    }\n\n    return list.map((number, i) => /*#__PURE__*/React.createElement(\"option\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 36\n      }\n    }, number));\n  }\n\n  render() {\n    const {\n      toggle\n    } = this.props;\n    return /*#__PURE__*/React.createElement(Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(ModalHeader, {\n      toggle: toggle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 9\n      }\n    }, \"Add a New Recipe\"), /*#__PURE__*/React.createElement(ModalBody, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Form, {\n      className: \"add-recipe-form\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Label, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 15\n      }\n    }, \"Recipe Name\"), /*#__PURE__*/React.createElement(Input, {\n      type: \"text\",\n      name: \"recipeName\",\n      id: \"recipeName\",\n      placeholder: \"Add Recipe Name\",\n      onChange: this.onNameChange,\n      invalid: this.state.isNameInvalid,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 15\n      }\n    }), /*#__PURE__*/React.createElement(FormFeedback, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 15\n      }\n    }, \"Recipe name must not be empty\")), /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Label, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 15\n      }\n    }, \"Description\"), /*#__PURE__*/React.createElement(Input, {\n      type: \"textarea\",\n      name: \"description\",\n      id: \"description\",\n      placeholder: \"Add a brief description of the recipe\",\n      onChange: this.onDescriptionChange,\n      invalid: this.state.isDescriptionInvalid,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 15\n      }\n    }), /*#__PURE__*/React.createElement(FormFeedback, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 15\n      }\n    }, \"Recipe description must not be empty\")), /*#__PURE__*/React.createElement(Label, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 13\n      }\n    }, \"Total Cook Time\"), /*#__PURE__*/React.createElement(Form, {\n      inline: true,\n      className: \"timeInput\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 261,\n        columnNumber: 15\n      }\n    }, \"Hours:\", /*#__PURE__*/React.createElement(Input, {\n      type: \"select\",\n      name: \"cookTimeHours\",\n      id: \"cookTimeHours\",\n      onChange: this.onCookTimeHourChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 263,\n        columnNumber: 17\n      }\n    }, this.generateOptions(0, 24)), \"Minutes:\", /*#__PURE__*/React.createElement(Input, {\n      type: \"select\",\n      name: \"cookTimeMinutes\",\n      id: \"cookTimeMinutes\",\n      onChange: this.onCookTimeMinuteChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 272,\n        columnNumber: 17\n      }\n    }, this.generateOptions(0, 59)))), /*#__PURE__*/React.createElement(FormGroup, {\n      invalid: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 282,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Label, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 283,\n        columnNumber: 15\n      }\n    }, \"Ingredients\"), this.createIngredientsList(), /*#__PURE__*/React.createElement(\"input\", {\n      className: \"button-secondary\",\n      type: \"button\",\n      value: \"Add row\",\n      onClick: this.addIngredientsClick.bind(this),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 285,\n        columnNumber: 15\n      }\n    }), /*#__PURE__*/React.createElement(FormFeedback, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 291,\n        columnNumber: 15\n      }\n    }, \"Recipe cook time must not be empty\")), /*#__PURE__*/React.createElement(FormGroup, {\n      invalid: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 294,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Label, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 295,\n        columnNumber: 15\n      }\n    }, \"Directions\"), this.createStepsList(), /*#__PURE__*/React.createElement(\"input\", {\n      className: \"button-secondary\",\n      type: \"button\",\n      value: \"Add row\",\n      onClick: this.addStepsClick.bind(this),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 297,\n        columnNumber: 15\n      }\n    })), /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 304,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Label, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 305,\n        columnNumber: 15\n      }\n    }, \"Photo\"), /*#__PURE__*/React.createElement(Input, {\n      type: \"text\",\n      name: \"photo\",\n      id: \"photo\",\n      placeholder: \"Add a URL for a photo to use for this recipe\",\n      onChange: this.onPictureChange,\n      invalid: this.state.isPictureInvalid,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 306,\n        columnNumber: 15\n      }\n    }), /*#__PURE__*/React.createElement(FormFeedback, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 314,\n        columnNumber: 15\n      }\n    }, \"Photo must be a valid image URL\"))), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 317,\n        columnNumber: 11\n      }\n    }, this.state.invalidRecipe && /*#__PURE__*/React.createElement(Alert, {\n      color: \"danger\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 319,\n        columnNumber: 15\n      }\n    }, this.state.errorMsg))), /*#__PURE__*/React.createElement(ModalFooter, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 323,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      className: \"button-secondary\",\n      onClick: this.onSumbitRecipe,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 324,\n        columnNumber: 11\n      }\n    }, \"Add Recipe\"), \" \", /*#__PURE__*/React.createElement(\"button\", {\n      className: \"button-secondary\",\n      onClick: toggle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 327,\n        columnNumber: 11\n      }\n    }, \"Cancel\")));\n  }\n\n}\n\nexport default AddRecipeModal;","map":{"version":3,"sources":["/Users/jackierauhut/Documents/recipe_share/src/components/AddRecipeModal/AddRecipeModal.js"],"names":["React","Fragment","ModalHeader","ModalBody","ModalFooter","Form","Label","Input","FormGroup","InputGroup","Button","InputGroupAddon","FormFeedback","Alert","AddRecipeModal","Component","constructor","props","onSumbitRecipe","recipeIngredients","state","filter","ingredient","trim","recipeSteps","step","length","setState","errorMsg","invalidRecipe","token","window","sessionStorage","getItem","recipeName","isNameInvalid","recipeDescription","isDescriptionInvalid","test","recipePicture","isPictureInvalid","fetch","method","headers","Authorization","body","JSON","stringify","name","cookTime","recipeCookTimeHour","recipeCookTimeMinute","parseInt","ingredients","steps","description","picture","then","response","json","data","id","toggle","navToRecipe","Error","catch","console","log","onNameChange","event","target","value","onCookTimeHourChange","onCookTimeMinuteChange","onDescriptionChange","onPictureChange","isCreateRecipeOpen","errMsg","createIngredientsList","map","i","handleChangeIngredients","bind","removeIngredientsClick","addIngredientsClick","prevState","splice","createStepsList","handleChangeSteps","removeStepsClick","addStepsClick","generateOptions","min","max","list","push","slice","number","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SACEC,WADF,EAEEC,SAFF,EAGEC,WAHF,EAIEC,IAJF,EAKEC,KALF,EAMEC,KANF,EAOEC,SAPF,EAQEC,UARF,EASEC,MATF,EAUEC,eAVF,EAWEC,YAXF,EAYEC,KAZF,QAaO,YAbP;AAcA,OAAO,sBAAP;;AAEA,MAAMC,cAAN,SAA6Bd,KAAK,CAACe,SAAnC,CAA6C;AAC3CC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,SAmBnBC,cAnBmB,GAmBF,MAAM;AACrB,YAAMC,iBAAiB,GAAG,KAAKC,KAAL,CAAWD,iBAAX,CAA6BE,MAA7B,CACvBC,UAAD,IAAgBA,UAAU,CAACC,IAAX,OAAsB,EADd,CAA1B;AAGA,YAAMC,WAAW,GAAG,KAAKJ,KAAL,CAAWI,WAAX,CAAuBH,MAAvB,CACjBI,IAAD,IAAUA,IAAI,CAACF,IAAL,OAAgB,EADR,CAApB,CAJqB,CAQrB;;AACA,UAAIJ,iBAAiB,CAACO,MAAlB,KAA6B,CAAjC,EAAoC;AAClC,aAAKC,QAAL,CAAc;AAAEC,UAAAA,QAAQ,EAAE;AAAZ,SAAd;AACA,aAAKD,QAAL,CAAc;AAAEE,UAAAA,aAAa,EAAE;AAAjB,SAAd;AACD,OAHD,MAGO,IAAIL,WAAW,CAACE,MAAZ,KAAuB,CAA3B,EAA8B;AACnC,aAAKC,QAAL,CAAc;AAAEC,UAAAA,QAAQ,EAAE;AAAZ,SAAd;AACA,aAAKD,QAAL,CAAc;AAAEE,UAAAA,aAAa,EAAE;AAAjB,SAAd;AACD,OAHM,MAGA;AACL,aAAKF,QAAL,CAAc;AAAEE,UAAAA,aAAa,EAAE;AAAjB,SAAd;AAEA,cAAMC,KAAK,GAAGC,MAAM,CAACC,cAAP,CAAsBC,OAAtB,CAA8B,OAA9B,CAAd,CAHK,CAKL;;AACA,YAAI,KAAKb,KAAL,CAAWc,UAAX,KAA0B,EAA9B,EAAkC;AAChC,eAAKP,QAAL,CAAc;AAAEQ,YAAAA,aAAa,EAAE;AAAjB,WAAd;AACD;;AACD,YAAI,KAAKf,KAAL,CAAWgB,iBAAX,KAAiC,EAArC,EAAyC;AACvC,eAAKT,QAAL,CAAc;AAAEU,YAAAA,oBAAoB,EAAE;AAAxB,WAAd;AACD;;AACD,YAAI,CAAC,wBAAwBC,IAAxB,CAA6B,KAAKlB,KAAL,CAAWmB,aAAxC,CAAL,EAA6D;AAC3D,eAAKZ,QAAL,CAAc;AAAEa,YAAAA,gBAAgB,EAAE;AAApB,WAAd;AACD;;AAEDC,QAAAA,KAAK,CAAC,8BAAD,EAAiC;AACpCC,UAAAA,MAAM,EAAE,MAD4B;AAEpCC,UAAAA,OAAO,EAAE;AAAE,4BAAgB,kBAAlB;AAAsCC,YAAAA,aAAa,EAAEd;AAArD,WAF2B;AAGpCe,UAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBC,YAAAA,IAAI,EAAE,KAAK5B,KAAL,CAAWc,UADE;AAEnBe,YAAAA,QAAQ,EACN,KAAK7B,KAAL,CAAW8B,kBAAX,KAAkC,IAAlC,GACK,GAAE,KAAK9B,KAAL,CAAW+B,oBAAqB,OADvC,GAEK,GAAEC,QAAQ,CAAC,KAAKhC,KAAL,CAAW8B,kBAAZ,EAAgC,EAAhC,CAAoC,OAC7C,KAAK9B,KAAL,CAAW+B,oBACZ,OAPY;AAQnBE,YAAAA,WAAW,EAAElC,iBARM;AASnBmC,YAAAA,KAAK,EAAE9B,WATY;AAUnB+B,YAAAA,WAAW,EAAE,KAAKnC,KAAL,CAAWgB,iBAVL;AAWnBoB,YAAAA,OAAO,EAAE,KAAKpC,KAAL,CAAWmB;AAXD,WAAf;AAH8B,SAAjC,CAAL,CAiBGkB,IAjBH,CAiBSC,QAAD,IAAcA,QAAQ,CAACC,IAAT,EAjBtB,EAkBGF,IAlBH,CAkBSG,IAAD,IAAU;AACd,cAAIA,IAAI,CAACC,EAAT,EAAa;AACX,iBAAK5C,KAAL,CAAW6C,MAAX;AACA,iBAAK7C,KAAL,CAAW8C,WAAX,CAAuBH,IAAI,CAACC,EAA5B;AACD,WAHD,MAGO;AACL,kBAAM,IAAIG,KAAJ,CAAU,gDAAV,CAAN;AACD;AACF,SAzBH,EA0BGC,KA1BH,CA0BSC,OAAO,CAACC,GA1BjB;AA2BD;AACF,KA9EkB;;AAAA,SAgFnBC,YAhFmB,GAgFHC,KAAD,IAAW;AACxB,WAAK1C,QAAL,CAAc;AAAEO,QAAAA,UAAU,EAAEmC,KAAK,CAACC,MAAN,CAAaC;AAA3B,OAAd;AACA,UAAIpC,aAAa,GAAG,KAApB;;AACA,UAAIkC,KAAK,CAACC,MAAN,CAAaC,KAAb,CAAmB7C,MAAnB,KAA8B,CAAlC,EAAqC;AACnCS,QAAAA,aAAa,GAAG,IAAhB;AACD;;AACD,WAAKR,QAAL,CAAc;AAAEQ,QAAAA;AAAF,OAAd;AACD,KAvFkB;;AAAA,SAyFnBqC,oBAzFmB,GAyFKH,KAAD,IAAW;AAChC,WAAK1C,QAAL,CAAc;AAAEuB,QAAAA,kBAAkB,EAAEmB,KAAK,CAACC,MAAN,CAAaC;AAAnC,OAAd;AACD,KA3FkB;;AAAA,SA6FnBE,sBA7FmB,GA6FOJ,KAAD,IAAW;AAClC,WAAK1C,QAAL,CAAc;AAAEwB,QAAAA,oBAAoB,EAAEkB,KAAK,CAACC,MAAN,CAAaC;AAArC,OAAd;AACD,KA/FkB;;AAAA,SAiGnBG,mBAjGmB,GAiGIL,KAAD,IAAW;AAC/B,WAAK1C,QAAL,CAAc;AAAES,QAAAA,iBAAiB,EAAEiC,KAAK,CAACC,MAAN,CAAaC;AAAlC,OAAd;AACA,UAAIlC,oBAAoB,GAAG,KAA3B;;AACA,UAAIgC,KAAK,CAACC,MAAN,CAAaC,KAAb,CAAmB7C,MAAnB,KAA8B,CAAlC,EAAqC;AACnCW,QAAAA,oBAAoB,GAAG,IAAvB;AACD;;AACD,WAAKV,QAAL,CAAc;AAAEU,QAAAA;AAAF,OAAd;AACD,KAxGkB;;AAAA,SA0GnBsC,eA1GmB,GA0GAN,KAAD,IAAW;AAC3B,WAAK1C,QAAL,CAAc;AAAEY,QAAAA,aAAa,EAAE8B,KAAK,CAACC,MAAN,CAAaC;AAA9B,OAAd;AACA,UAAI/B,gBAAgB,GAAG,KAAvB;;AACA,UAAI,CAAC,wBAAwBF,IAAxB,CAA6B+B,KAAK,CAACC,MAAN,CAAaC,KAA1C,CAAL,EAAuD;AACrD/B,QAAAA,gBAAgB,GAAG,IAAnB;AACD;;AACD,WAAKb,QAAL,CAAc;AAAEa,QAAAA;AAAF,OAAd;AACD,KAjHkB;;AAEjB,SAAKpB,KAAL,GAAa;AACXwD,MAAAA,kBAAkB,EAAE,KADT;AAEX1C,MAAAA,UAAU,EAAE,EAFD;AAGXC,MAAAA,aAAa,EAAE,KAHJ;AAIXe,MAAAA,kBAAkB,EAAE,IAJT;AAKXC,MAAAA,oBAAoB,EAAE,IALX;AAMXhC,MAAAA,iBAAiB,EAAE,CAAC,EAAD,CANR;AAOXK,MAAAA,WAAW,EAAE,CAAC,EAAD,CAPF;AAQXY,MAAAA,iBAAiB,EAAE,EARR;AASXC,MAAAA,oBAAoB,EAAE,KATX;AAUXE,MAAAA,aAAa,EAAE,EAVJ;AAWXC,MAAAA,gBAAgB,EAAE,KAXP;AAYXqC,MAAAA,MAAM,EAAE,yBAZG;AAaXhD,MAAAA,aAAa,EAAE;AAbJ,KAAb;AAeD;;AAkGDiD,EAAAA,qBAAqB,GAAG;AACtB,WAAO,KAAK1D,KAAL,CAAWD,iBAAX,CAA6B4D,GAA7B,CAAiC,CAACzD,UAAD,EAAa0D,CAAb,kBACtC;AAAK,MAAA,GAAG,EAAEA,CAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,KAAD;AACE,MAAA,IAAI,EAAC,MADP;AAEE,MAAA,KAAK,EAAE1D,UAAU,IAAI,EAFvB;AAGE,MAAA,WAAW,EAAC,mCAHd;AAIE,MAAA,QAAQ,EAAE,KAAK2D,uBAAL,CAA6BC,IAA7B,CAAkC,IAAlC,EAAwCF,CAAxC,CAJZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAOGA,CAAC,KAAK,CAAN,gBACC,oBAAC,eAAD;AAAiB,MAAA,SAAS,EAAC,QAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,MAAD;AACE,MAAA,KAAK,EAAC,QADR;AAEE,MAAA,OAAO,EAAE,KAAKG,sBAAL,CAA4BD,IAA5B,CAAiC,IAAjC,EAAuCF,CAAvC,CAFX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,CADD,GASG,IAhBN,CADF,CADK,CAAP;AAsBD;;AAEDC,EAAAA,uBAAuB,CAACD,CAAD,EAAIX,KAAJ,EAAW;AAChC,QAAIlD,iBAAiB,GAAG,CAAC,GAAG,KAAKC,KAAL,CAAWD,iBAAf,CAAxB;AACAA,IAAAA,iBAAiB,CAAC6D,CAAD,CAAjB,GAAuBX,KAAK,CAACC,MAAN,CAAaC,KAApC;AACA,SAAK5C,QAAL,CAAc;AAAER,MAAAA;AAAF,KAAd;AACD;;AAEDiE,EAAAA,mBAAmB,GAAG;AACpB,SAAKzD,QAAL,CAAe0D,SAAD,KAAgB;AAC5BlE,MAAAA,iBAAiB,EAAE,CAAC,GAAGkE,SAAS,CAAClE,iBAAd,EAAiC,EAAjC;AADS,KAAhB,CAAd;AAGD;;AAEDgE,EAAAA,sBAAsB,CAACH,CAAD,EAAI;AACxB,QAAI7D,iBAAiB,GAAG,CAAC,GAAG,KAAKC,KAAL,CAAWD,iBAAf,CAAxB;AACAA,IAAAA,iBAAiB,CAACmE,MAAlB,CAAyBN,CAAzB,EAA4B,CAA5B;AACA,SAAKrD,QAAL,CAAc;AAAER,MAAAA;AAAF,KAAd;AACD;;AAEDoE,EAAAA,eAAe,GAAG;AAChB,WAAO,KAAKnE,KAAL,CAAWI,WAAX,CAAuBuD,GAAvB,CAA2B,CAACtD,IAAD,EAAOuD,CAAP,kBAChC;AAAK,MAAA,GAAG,EAAEA,CAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,KAAD;AACE,MAAA,IAAI,EAAC,UADP;AAEE,MAAA,KAAK,EAAEvD,IAAI,IAAI,EAFjB;AAGE,MAAA,WAAW,EAAC,+CAHd;AAIE,MAAA,QAAQ,EAAE,KAAK+D,iBAAL,CAAuBN,IAAvB,CAA4B,IAA5B,EAAkCF,CAAlC,CAJZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAOGA,CAAC,KAAK,CAAN,gBACC,oBAAC,eAAD;AAAiB,MAAA,SAAS,EAAC,QAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,MAAD;AACE,MAAA,KAAK,EAAC,QADR;AAEE,MAAA,OAAO,EAAE,KAAKS,gBAAL,CAAsBP,IAAtB,CAA2B,IAA3B,EAAiCF,CAAjC,CAFX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,CADD,GASG,IAhBN,CADF,CADK,CAAP;AAsBD;;AAEDQ,EAAAA,iBAAiB,CAACR,CAAD,EAAIX,KAAJ,EAAW;AAC1B,QAAI7C,WAAW,GAAG,CAAC,GAAG,KAAKJ,KAAL,CAAWI,WAAf,CAAlB;AACAA,IAAAA,WAAW,CAACwD,CAAD,CAAX,GAAiBX,KAAK,CAACC,MAAN,CAAaC,KAA9B;AACA,SAAK5C,QAAL,CAAc;AAAEH,MAAAA;AAAF,KAAd;AACD;;AAEDkE,EAAAA,aAAa,GAAG;AACd,SAAK/D,QAAL,CAAe0D,SAAD,KAAgB;AAC5B7D,MAAAA,WAAW,EAAE,CAAC,GAAG6D,SAAS,CAAC7D,WAAd,EAA2B,EAA3B;AADe,KAAhB,CAAd;AAGD;;AAEDiE,EAAAA,gBAAgB,CAACT,CAAD,EAAI;AAClB,QAAIxD,WAAW,GAAG,CAAC,GAAG,KAAKJ,KAAL,CAAWI,WAAf,CAAlB;AACAA,IAAAA,WAAW,CAAC8D,MAAZ,CAAmBN,CAAnB,EAAsB,CAAtB;AACA,SAAKrD,QAAL,CAAc;AAAEH,MAAAA;AAAF,KAAd;AACD;;AAEDmE,EAAAA,eAAe,CAACC,GAAD,EAAMC,GAAN,EAAW;AACxB,QAAIC,IAAI,GAAG,EAAX;;AACA,SAAK,IAAId,CAAC,GAAGY,GAAb,EAAkBZ,CAAC,IAAIa,GAAvB,EAA4Bb,CAAC,EAA7B,EAAiC;AAC/Bc,MAAAA,IAAI,CAACC,IAAL,CAAU,CAAC,MAAMf,CAAP,EAAUgB,KAAV,CAAgB,CAAC,CAAjB,CAAV;AACD;;AACD,WAAOF,IAAI,CAACf,GAAL,CAAS,CAACkB,MAAD,EAASjB,CAAT,kBAAe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAASiB,MAAT,CAAxB,CAAP;AACD;;AAEDC,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEpC,MAAAA;AAAF,QAAa,KAAK7C,KAAxB;AACA,wBACE,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,WAAD;AAAa,MAAA,MAAM,EAAE6C,MAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BADF,eAEE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,IAAD;AAAM,MAAA,SAAS,EAAC,iBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADF,eAEE,oBAAC,KAAD;AACE,MAAA,IAAI,EAAC,MADP;AAEE,MAAA,IAAI,EAAC,YAFP;AAGE,MAAA,EAAE,EAAC,YAHL;AAIE,MAAA,WAAW,EAAC,iBAJd;AAKE,MAAA,QAAQ,EAAE,KAAKM,YALjB;AAME,MAAA,OAAO,EAAE,KAAKhD,KAAL,CAAWe,aANtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,eAUE,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uCAVF,CADF,eAaE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADF,eAEE,oBAAC,KAAD;AACE,MAAA,IAAI,EAAC,UADP;AAEE,MAAA,IAAI,EAAC,aAFP;AAGE,MAAA,EAAE,EAAC,aAHL;AAIE,MAAA,WAAW,EAAC,uCAJd;AAKE,MAAA,QAAQ,EAAE,KAAKuC,mBALjB;AAME,MAAA,OAAO,EAAE,KAAKtD,KAAL,CAAWiB,oBANtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,eAUE,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8CAVF,CAbF,eAyBE,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAzBF,eA0BE,oBAAC,IAAD;AAAM,MAAA,MAAM,MAAZ;AAAa,MAAA,SAAS,EAAC,WAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BAEE,oBAAC,KAAD;AACE,MAAA,IAAI,EAAC,QADP;AAEE,MAAA,IAAI,EAAC,eAFP;AAGE,MAAA,EAAE,EAAC,eAHL;AAIE,MAAA,QAAQ,EAAE,KAAKmC,oBAJjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAMG,KAAKmB,eAAL,CAAqB,CAArB,EAAwB,EAAxB,CANH,CAFF,2BAWE,oBAAC,KAAD;AACE,MAAA,IAAI,EAAC,QADP;AAEE,MAAA,IAAI,EAAC,iBAFP;AAGE,MAAA,EAAE,EAAC,iBAHL;AAIE,MAAA,QAAQ,EAAE,KAAKlB,sBAJjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAMG,KAAKkB,eAAL,CAAqB,CAArB,EAAwB,EAAxB,CANH,CAXF,CADF,CA1BF,eAgDE,oBAAC,SAAD;AAAW,MAAA,OAAO,MAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADF,EAEG,KAAKb,qBAAL,EAFH,eAGE;AACE,MAAA,SAAS,EAAC,kBADZ;AAEE,MAAA,IAAI,EAAC,QAFP;AAGE,MAAA,KAAK,EAAC,SAHR;AAIE,MAAA,OAAO,EAAE,KAAKM,mBAAL,CAAyBF,IAAzB,CAA8B,IAA9B,CAJX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHF,eASE,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4CATF,CAhDF,eA4DE,oBAAC,SAAD;AAAW,MAAA,OAAO,MAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF,EAEG,KAAKK,eAAL,EAFH,eAGE;AACE,MAAA,SAAS,EAAC,kBADZ;AAEE,MAAA,IAAI,EAAC,QAFP;AAGE,MAAA,KAAK,EAAC,SAHR;AAIE,MAAA,OAAO,EAAE,KAAKG,aAAL,CAAmBR,IAAnB,CAAwB,IAAxB,CAJX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHF,CA5DF,eAsEE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADF,eAEE,oBAAC,KAAD;AACE,MAAA,IAAI,EAAC,MADP;AAEE,MAAA,IAAI,EAAC,OAFP;AAGE,MAAA,EAAE,EAAC,OAHL;AAIE,MAAA,WAAW,EAAC,8CAJd;AAKE,MAAA,QAAQ,EAAE,KAAKP,eALjB;AAME,MAAA,OAAO,EAAE,KAAKvD,KAAL,CAAWoB,gBANtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,eAUE,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yCAVF,CAtEF,CADF,eAoFE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,KAAKpB,KAAL,CAAWS,aAAX,iBACC,oBAAC,KAAD;AAAO,MAAA,KAAK,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAuB,KAAKT,KAAL,CAAWQ,QAAlC,CAFJ,CApFF,CAFF,eA4FE,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAQ,MAAA,SAAS,EAAC,kBAAlB;AAAqC,MAAA,OAAO,EAAE,KAAKV,cAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF,EAGY,GAHZ,eAIE;AAAQ,MAAA,SAAS,EAAC,kBAAlB;AAAqC,MAAA,OAAO,EAAE4C,MAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAJF,CA5FF,CADF;AAuGD;;AA3T0C;;AA8T7C,eAAehD,cAAf","sourcesContent":["import React, { Fragment } from \"react\";\nimport {\n  ModalHeader,\n  ModalBody,\n  ModalFooter,\n  Form,\n  Label,\n  Input,\n  FormGroup,\n  InputGroup,\n  Button,\n  InputGroupAddon,\n  FormFeedback,\n  Alert,\n} from \"reactstrap\";\nimport \"./AddRecipeModal.css\";\n\nclass AddRecipeModal extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isCreateRecipeOpen: false,\n      recipeName: \"\",\n      isNameInvalid: false,\n      recipeCookTimeHour: \"00\",\n      recipeCookTimeMinute: \"00\",\n      recipeIngredients: [\"\"],\n      recipeSteps: [\"\"],\n      recipeDescription: \"\",\n      isDescriptionInvalid: false,\n      recipePicture: \"\",\n      isPictureInvalid: false,\n      errMsg: \"Unable to create recipe\",\n      invalidRecipe: false,\n    };\n  }\n\n  onSumbitRecipe = () => {\n    const recipeIngredients = this.state.recipeIngredients.filter(\n      (ingredient) => ingredient.trim() !== \"\"\n    );\n    const recipeSteps = this.state.recipeSteps.filter(\n      (step) => step.trim() !== \"\"\n    );\n\n    // Verify that ingredient and direction list are not empty\n    if (recipeIngredients.length === 0) {\n      this.setState({ errorMsg: \"Please enter at least one ingredient\" });\n      this.setState({ invalidRecipe: true });\n    } else if (recipeSteps.length === 0) {\n      this.setState({ errorMsg: \"Please enter at least one direction\" });\n      this.setState({ invalidRecipe: true });\n    } else {\n      this.setState({ invalidRecipe: false });\n\n      const token = window.sessionStorage.getItem(\"token\");\n\n      // verify valid form input\n      if (this.state.recipeName === \"\") {\n        this.setState({ isNameInvalid: true });\n      }\n      if (this.state.recipeDescription === \"\") {\n        this.setState({ isDescriptionInvalid: true });\n      }\n      if (!/\\.(jpeg|jpg|gif|png)$/.test(this.state.recipePicture)) {\n        this.setState({ isPictureInvalid: true });\n      }\n\n      fetch(\"http://localhost:3000/recipe\", {\n        method: \"post\",\n        headers: { \"Content-Type\": \"application/json\", Authorization: token },\n        body: JSON.stringify({\n          name: this.state.recipeName,\n          cookTime:\n            this.state.recipeCookTimeHour === \"00\"\n              ? `${this.state.recipeCookTimeMinute} mins`\n              : `${parseInt(this.state.recipeCookTimeHour, 10)} hr ${\n                  this.state.recipeCookTimeMinute\n                } mins`,\n          ingredients: recipeIngredients,\n          steps: recipeSteps,\n          description: this.state.recipeDescription,\n          picture: this.state.recipePicture,\n        }),\n      })\n        .then((response) => response.json())\n        .then((data) => {\n          if (data.id) {\n            this.props.toggle();\n            this.props.navToRecipe(data.id);\n          } else {\n            throw new Error(\"Something went wrong when trying to add recipe\");\n          }\n        })\n        .catch(console.log);\n    }\n  };\n\n  onNameChange = (event) => {\n    this.setState({ recipeName: event.target.value });\n    let isNameInvalid = false;\n    if (event.target.value.length === 0) {\n      isNameInvalid = true;\n    }\n    this.setState({ isNameInvalid });\n  };\n\n  onCookTimeHourChange = (event) => {\n    this.setState({ recipeCookTimeHour: event.target.value });\n  };\n\n  onCookTimeMinuteChange = (event) => {\n    this.setState({ recipeCookTimeMinute: event.target.value });\n  };\n\n  onDescriptionChange = (event) => {\n    this.setState({ recipeDescription: event.target.value });\n    let isDescriptionInvalid = false;\n    if (event.target.value.length === 0) {\n      isDescriptionInvalid = true;\n    }\n    this.setState({ isDescriptionInvalid });\n  };\n\n  onPictureChange = (event) => {\n    this.setState({ recipePicture: event.target.value });\n    let isPictureInvalid = false;\n    if (!/\\.(jpeg|jpg|gif|png)$/.test(event.target.value)) {\n      isPictureInvalid = true;\n    }\n    this.setState({ isPictureInvalid });\n  };\n\n  createIngredientsList() {\n    return this.state.recipeIngredients.map((ingredient, i) => (\n      <div key={i}>\n        <InputGroup>\n          <Input\n            type=\"text\"\n            value={ingredient || \"\"}\n            placeholder=\"Add an ingredient for this recipe\"\n            onChange={this.handleChangeIngredients.bind(this, i)}\n          />\n          {i !== 0 ? (\n            <InputGroupAddon addonType=\"append\">\n              <Button\n                color=\"danger\"\n                onClick={this.removeIngredientsClick.bind(this, i)}\n              >\n                Remove\n              </Button>\n            </InputGroupAddon>\n          ) : null}\n        </InputGroup>\n      </div>\n    ));\n  }\n\n  handleChangeIngredients(i, event) {\n    let recipeIngredients = [...this.state.recipeIngredients];\n    recipeIngredients[i] = event.target.value;\n    this.setState({ recipeIngredients });\n  }\n\n  addIngredientsClick() {\n    this.setState((prevState) => ({\n      recipeIngredients: [...prevState.recipeIngredients, \"\"],\n    }));\n  }\n\n  removeIngredientsClick(i) {\n    let recipeIngredients = [...this.state.recipeIngredients];\n    recipeIngredients.splice(i, 1);\n    this.setState({ recipeIngredients });\n  }\n\n  createStepsList() {\n    return this.state.recipeSteps.map((step, i) => (\n      <div key={i}>\n        <InputGroup>\n          <Input\n            type=\"textarea\"\n            value={step || \"\"}\n            placeholder=\"Add an instruction for completing this recipe\"\n            onChange={this.handleChangeSteps.bind(this, i)}\n          />\n          {i !== 0 ? (\n            <InputGroupAddon addonType=\"append\">\n              <Button\n                color=\"danger\"\n                onClick={this.removeStepsClick.bind(this, i)}\n              >\n                Remove\n              </Button>\n            </InputGroupAddon>\n          ) : null}\n        </InputGroup>\n      </div>\n    ));\n  }\n\n  handleChangeSteps(i, event) {\n    let recipeSteps = [...this.state.recipeSteps];\n    recipeSteps[i] = event.target.value;\n    this.setState({ recipeSteps });\n  }\n\n  addStepsClick() {\n    this.setState((prevState) => ({\n      recipeSteps: [...prevState.recipeSteps, \"\"],\n    }));\n  }\n\n  removeStepsClick(i) {\n    let recipeSteps = [...this.state.recipeSteps];\n    recipeSteps.splice(i, 1);\n    this.setState({ recipeSteps });\n  }\n\n  generateOptions(min, max) {\n    let list = [];\n    for (let i = min; i <= max; i++) {\n      list.push((\"0\" + i).slice(-2));\n    }\n    return list.map((number, i) => <option>{number}</option>);\n  }\n\n  render() {\n    const { toggle } = this.props;\n    return (\n      <Fragment>\n        <ModalHeader toggle={toggle}>Add a New Recipe</ModalHeader>\n        <ModalBody>\n          <Form className=\"add-recipe-form\">\n            <FormGroup>\n              <Label>Recipe Name</Label>\n              <Input\n                type=\"text\"\n                name=\"recipeName\"\n                id=\"recipeName\"\n                placeholder=\"Add Recipe Name\"\n                onChange={this.onNameChange}\n                invalid={this.state.isNameInvalid}\n              />\n              <FormFeedback>Recipe name must not be empty</FormFeedback>\n            </FormGroup>\n            <FormGroup>\n              <Label>Description</Label>\n              <Input\n                type=\"textarea\"\n                name=\"description\"\n                id=\"description\"\n                placeholder=\"Add a brief description of the recipe\"\n                onChange={this.onDescriptionChange}\n                invalid={this.state.isDescriptionInvalid}\n              />\n              <FormFeedback>Recipe description must not be empty</FormFeedback>\n            </FormGroup>\n            <Label>Total Cook Time</Label>\n            <Form inline className=\"timeInput\">\n              <FormGroup>\n                Hours:\n                <Input\n                  type=\"select\"\n                  name=\"cookTimeHours\"\n                  id=\"cookTimeHours\"\n                  onChange={this.onCookTimeHourChange}\n                >\n                  {this.generateOptions(0, 24)}\n                </Input>\n                Minutes:\n                <Input\n                  type=\"select\"\n                  name=\"cookTimeMinutes\"\n                  id=\"cookTimeMinutes\"\n                  onChange={this.onCookTimeMinuteChange}\n                >\n                  {this.generateOptions(0, 59)}\n                </Input>\n              </FormGroup>\n            </Form>\n            <FormGroup invalid>\n              <Label>Ingredients</Label>\n              {this.createIngredientsList()}\n              <input\n                className=\"button-secondary\"\n                type=\"button\"\n                value=\"Add row\"\n                onClick={this.addIngredientsClick.bind(this)}\n              />\n              <FormFeedback>Recipe cook time must not be empty</FormFeedback>\n            </FormGroup>\n\n            <FormGroup invalid>\n              <Label>Directions</Label>\n              {this.createStepsList()}\n              <input\n                className=\"button-secondary\"\n                type=\"button\"\n                value=\"Add row\"\n                onClick={this.addStepsClick.bind(this)}\n              />\n            </FormGroup>\n            <FormGroup>\n              <Label>Photo</Label>\n              <Input\n                type=\"text\"\n                name=\"photo\"\n                id=\"photo\"\n                placeholder=\"Add a URL for a photo to use for this recipe\"\n                onChange={this.onPictureChange}\n                invalid={this.state.isPictureInvalid}\n              />\n              <FormFeedback>Photo must be a valid image URL</FormFeedback>\n            </FormGroup>\n          </Form>\n          <div>\n            {this.state.invalidRecipe && (\n              <Alert color=\"danger\">{this.state.errorMsg}</Alert>\n            )}\n          </div>\n        </ModalBody>\n        <ModalFooter>\n          <button className=\"button-secondary\" onClick={this.onSumbitRecipe}>\n            Add Recipe\n          </button>{\" \"}\n          <button className=\"button-secondary\" onClick={toggle}>\n            Cancel\n          </button>\n        </ModalFooter>\n      </Fragment>\n    );\n  }\n}\n\nexport default AddRecipeModal;\n"]},"metadata":{},"sourceType":"module"}